// TODO: much of this is written to use dummyjson. properties will need to be adapted to use Flickr API
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"


interface LatLongCoords {
    lat: number
    lng: number
}

interface Address {
    coordinates: LatLongCoords
}

export interface Place {
    id: number
    image: string
    lastName: string
    address: Address
}

export interface PlaceApiResponse {
    users: Place[]
    total: number
    skip: number
    limit: number
}

// Define a service using a base URL and expected endpoints
export const flickrApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com/users" }),
    reducerPath: "flickrApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["FlickrPlaces"],
    endpoints: build => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getFlickrPlaces: build.query<PlaceApiResponse, number>({
            query: (limit) => `?limit=${limit}`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{ type: "FlickrPlaces", id }],
        }),
    }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetFlickrPlacesQuery } = flickrApiSlice
